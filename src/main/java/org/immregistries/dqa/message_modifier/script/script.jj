/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. script.jj */
/*@egen*/options {
USER_CHAR_STREAM = true;
}
PARSER_BEGIN(NewScript)
<<<<<<< HEAD
import org.immregistries.dqa.message_modifier.script.*;


=======
>>>>>>> 665765c155c81247756ea5b3d1f986a4fecb52b1
/** New line translator. */
public class NewScript/*@bgen(jjtree)*/implements NewScriptTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTNewScriptState jjtree = new JJTNewScriptState();

/*@egen*/

  public static class CustomNode extends SimpleNode {

    CustomNode(int i){
      super(i);
    }
    public int getChildrenCount() {
      return this.children==null?0:children.length;
    }

    public String getName() {
      return NewScriptTreeConstants.jjtNodeName[this.id];
    }

    public Object eval(Object o) {
      if(o == null) {
        return null;
      }
      switch(this.id) {
<<<<<<< HEAD

        case JJTEXPRESSIONS:
          System.out.println("Expressions");
          return null;

=======
        case JJTEXPRESSIONS:
          System.out.println("Expressions");
          return null;
>>>>>>> 665765c155c81247756ea5b3d1f986a4fecb52b1
        default:
          System.out.println("default");
          return null;
      }
    }
  }

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    NewScript parser = new NewScript(System.in);
    try {
          SimpleNode n = parser.ExpressionList();
          //n.dump("");
          n.testPrint();
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
  }

}

PARSER_END(NewScript)

SKIP :
{
" "
| "\t"
| "\r"
}

TOKEN :
{
  < IF: "if" >
|
  < FOR: "for" >
|
  < THEN: "then" >
|
  < USE: "use" >
|
  < CALL: "call" >
|
  < ID: ["a"-"z","A"-"Z","_","0"-"9"]["a"-"z","A"-"Z","_","0"-"9"]["a"-"z","A"-"Z","_","0"-"9"] >
|
  < STRING: "\""( ["a"-"z","A"-"Z","_","0"-"9"] )* "\"">
|
  < NUM: ( ["0"-"9"] )+ >
|
  < PRESET_VALUE: "["["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* "]">
|
  < UNQUOTED_STRING : ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  < CONTEXT_SELECTOR : "::" >
|
  < EQUAL: "==" >
|
  < DIFFERENT: "!=" >
|
  < GREATER_THAN: ">" >
|
  < LESSER_THAN: "<" >
}
SimpleNode ExpressionList()              :
{/*@bgen(jjtree) EXPRESSIONS */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s;
  String result="";
}
{/*@bgen(jjtree) EXPRESSIONS */
  try {
/*@egen*/
  {
    System.out.println("Please type in an expression followed by a \";\" or ^D to quit:");
    System.out.println("");
  }
  ( s=command() ";""\n"
  {
    result+=s+";"+"\n";
  }
  |
  "\n"
    {
      result+="\n";
    }
  )*
  <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      System.out.println("");
      System.out.println(result);
      return jjtn000;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String command()          :
{/*@bgen(jjtree) COMMAND */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String string;
  String s = "";
}
{/*@bgen(jjtree) COMMAND */
  try {
/*@egen*/
  (
  (
      (
      string = forSelector()
      {
          s += string;
      }
      )?
      (
      string = ifCommand()
      {
          s += string;
      }
      )?
      (
          string = assignment()
          {
              s += string;  
          }
          | string = functionCall()
            {
              s += string;
            }
      )
  )
  | s = useCommand()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String useCommand()              :
{/*@bgen(jjtree) USE_COMMAND */
    SimpleNode jjtn000 = new SimpleNode(JJTUSE_COMMAND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token token;
  Token token2;
  String s;
}
{/*@bgen(jjtree) USE_COMMAND */
  try {
/*@egen*/
  <USE>
  token = <UNQUOTED_STRING>
  <CONTEXT_SELECTOR>
  token2 = <UNQUOTED_STRING>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        s = "use " + token.image + " :: " + token2.image;
        return s;
      }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String assignment()             :
{/*@bgen(jjtree) ASSIGNMENT */
    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String ref;
    String sta;
    String s;
}
{/*@bgen(jjtree) ASSIGNMENT */
    try {
/*@egen*/
    ref = reference()
    "="
    statement()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        s = ref + "= statement";
        return s;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String ifCommand()    :
{/*@bgen(jjtree) IF */
    SimpleNode jjtn000 = new SimpleNode(JJTIF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s, comp, func, ref;
    Token token, token2;
}
{/*@bgen(jjtree) IF */
    try {
/*@egen*/
    <IF>
    (
        ref = reference()
        {
            s = "if" + "(" + ref + ")";
        }
        | token = <STRING> comp = comparison() token2 = <STRING>
          {
            s = "if" + "(" + token.image + comp + token.image + ")";
          }
    )
    <THEN>
    func = functionCall()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        s += "then" + func;
        return s;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String comparison()      :
{/*@bgen(jjtree) COMP */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token token;
}
{/*@bgen(jjtree) COMP */
    try {
/*@egen*/
    (
    token = <EQUAL>
    | token = <DIFFERENT>
    | token = <GREATER_THAN>
    | token = <LESSER_THAN>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String forSelector()     :
{/*@bgen(jjtree) FOR */
    SimpleNode jjtn000 = new SimpleNode(JJTFOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String ref;
}
{/*@bgen(jjtree) FOR */
    try {
/*@egen*/
    <FOR>
    ref = referencePointer()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return ref;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String referencePointer()             :
{/*@bgen(jjtree) REF_POINTER */
    SimpleNode jjtn000 = new SimpleNode(JJTREF_POINTER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s;
}
{/*@bgen(jjtree) REF_POINTER */
    try {
/*@egen*/
    "$"s = reference()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return s;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String reference()           :
{/*@bgen(jjtree) REFERENCE */
  SimpleNode jjtn000 = new SimpleNode(JJTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s, ref, id;
}
{/*@bgen(jjtree) REFERENCE */
  try {
/*@egen*/
  id = refId()
  {
      s = id;
  }
  (
  ref = refContext()
    {
        s += ref;
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
        return s;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String refContext()             :
{/*@bgen(jjtree) REF_CONTEXT */
    SimpleNode jjtn000 = new SimpleNode(JJTREF_CONTEXT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String id, s;
}
{/*@bgen(jjtree) REF_CONTEXT */
    try {
/*@egen*/
    (
        <CONTEXT_SELECTOR>
        id = refId()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            s = " :: " + id;
            return s;
        }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String refId()        :
{/*@bgen(jjtree) REF_ID */
SimpleNode jjtn000 = new SimpleNode(JJTREF_ID);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
String id, field, sub, s;
}
{/*@bgen(jjtree) REF_ID */
    try {
/*@egen*/
    id = segId()
  {
      s = id;
  }
  (
      "-"
      field = fieldNum()
      {
          s += "-" + field;
      }
      (
          "."
          sub = subNum()
          {
              s+= "." + sub;
          }
      )?
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      return s;
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String functionCall()          :
{/*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token name;
  String s;
}
{/*@bgen(jjtree) FUNCTION */
    try {
/*@egen*/
    <CALL>
  name = <UNQUOTED_STRING>
  "("
  s=arguments()
  ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return name.image+"("+s+")";
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String arguments()      :
{/*@bgen(jjtree) ARGS */
    SimpleNode jjtn000 = new SimpleNode(JJTARGS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token arg_name;
  Token arg_value;
  String s="";
}
{/*@bgen(jjtree) ARGS */
  try {
/*@egen*/
  (
  arg_name=<UNQUOTED_STRING> "=>" arg_value = <UNQUOTED_STRING>
  {
      s+= arg_name.image + "=>" + arg_value.image;
  }
        (
        ","
            {
                s += ",";
            }
        )?
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
<<<<<<< HEAD

=======
>>>>>>> 665765c155c81247756ea5b3d1f986a4fecb52b1
void statement()           :
{/*@bgen(jjtree) STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
}
{/*@bgen(jjtree) STATEMENT */
  try {
/*@egen*/
  token = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.value = token.image;
    }
  |
    referencePointer()
  |
  token=<PRESET_VALUE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.value = token.image;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String segId()        :
{/*@bgen(jjtree) SEG_ID */
  SimpleNode jjtn000 = new SimpleNode(JJTSEG_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id;
  String s="";
}
{/*@bgen(jjtree) SEG_ID */
  try {
/*@egen*/
  id = <ID>
  {
    jjtn000.value = id.image;
  }
  (
        s = repetitionSelector()
    )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      s = id.image + s;
        return s;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String fieldNum()           :
{/*@bgen(jjtree) FIELD_NUM */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELD_NUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token num;
  String s, rep;
}
{/*@bgen(jjtree) FIELD_NUM */
  try {
/*@egen*/
  num=<NUM>
    {
        s = (String) num.image;
        jjtn000.value = num.image;
    }
    (
           rep = repetitionSelector()
           {
              s += rep;
           }
    )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return s;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String subNum()         :
{/*@bgen(jjtree) SUB_NUM */
  SimpleNode jjtn000 = new SimpleNode(JJTSUB_NUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token num;
  String s, rep;
}
{/*@bgen(jjtree) SUB_NUM */
  try {
/*@egen*/
  num=<NUM>
  {
        s = (String) num.image;
        jjtn000.value = num.image;
    }
  (
      rep = repetitionSelector()
      {
          s += rep;
      }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      return s;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String repetitionSelector()                   :
{/*@bgen(jjtree) REPETION_SELECTOR */
    SimpleNode jjtn000 = new SimpleNode(JJTREPETION_SELECTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token num;
    String s;
}
{/*@bgen(jjtree) REPETION_SELECTOR */
        try {
/*@egen*/
        "["
        num = <NUM>
        "]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        s = "[" + num.image + "]";
        return s;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String comments()          :
{/*@bgen(jjtree) COMMENTS */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s="";
}
{/*@bgen(jjtree) COMMENTS */
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        s = "\\" + s;
        return s;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}